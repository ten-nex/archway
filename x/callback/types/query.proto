syntax = "proto3";
package archway.callback.v1;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "archway/callback/v1/callback.proto";

// Query defines the gRPC query service.
service Query {
  // Params returns module parameters
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/archway/callback/v1/params";
  }

  // EstimateCallbackFees returns the total amount of callback fees a contract needs to pay to register the callback
  rpc EstimateCallbackFees(QueryEstimateCallbackFeesRequest) returns (QueryEstimateCallbackFeesResponse) {
    option (google.api.http).get = "/archway/callback/v1/estimate_callback_fees/{block_height}";
  }

  // Callbacks returns all the callbacks registered at a given height
  rpc Callbacks(QueryCallbacksRequest) returns (QueryCallbacksResponse) {
    option (google.api.http).get = "/archway/callback/v1/callbacks/{block_height}";
  }
}

// QueryParamsRequest is the request for Query.Params.
message QueryParamsRequest {
}

message QueryParamsResponse {
  // params defines all the module parameters.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryEstimateCallbackFeesRequest is the request for Query.EstimateCallbackFees.
message QueryEstimateCallbackFeesRequest {
  // block_height is the height at which to estimate the callback fees
  int64 block_height = 1;
}

message QueryEstimateCallbackFeesResponse {
  // total_fees is the total fees that needs to be paid by the contract to reserve a callback
  cosmos.base.v1beta1.Coin total_fees = 1;
  // fee_split is the breakdown of the total_fees
  CallbackFeesFeeSplit fee_split = 2 [(gogoproto.nullable) = false];
}

// QueryCallbacksRequest is the request for Query.Callbacks.
message QueryCallbacksRequest {
  // block_height is the height at which to query the callbacks
  int64 block_height = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryCallbacksResponse {
  // callbacks is the list of callbacks registered at the given height
  repeated Callback callbacks = 1 [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}